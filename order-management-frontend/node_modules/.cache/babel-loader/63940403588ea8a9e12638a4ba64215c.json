{"ast":null,"code":"import _defineProperty from \"G:\\\\Navtech-assessment\\\\order-management-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"G:\\\\Navtech-assessment\\\\order-management-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"G:\\\\Navtech-assessment\\\\order-management-frontend\\\\src\\\\core\\\\Checkout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { getProducts, getBraintreeClientToken, processPayment, createOrder } from \"./apiCore\";\nimport { emptyCart } from \"./cartHelpers\";\nimport Card from \"./Card\";\nimport { isAuthenticated } from \"../auth\";\nimport { Link } from \"react-router-dom\";\nimport \"braintree-web\";\nimport DropIn from \"braintree-web-drop-in-react\";\n\nconst Checkout = ({\n  products\n}) => {\n  const _useState = useState({\n    loading: false,\n    success: false,\n    clientToken: null,\n    error: \"\",\n    instance: {},\n    address: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const userId = isAuthenticated() && isAuthenticated().user._id;\n\n  const token = isAuthenticated() && isAuthenticated().token;\n\n  const getToken = (userId, token) => {\n    getBraintreeClientToken(userId, token).then(data => {\n      if (data.error) {\n        setData(_objectSpread({}, data, {\n          error: data.error\n        }));\n      } else {\n        setData({\n          clientToken: data.clientToken\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    getToken(userId, token);\n  }, []);\n\n  const handleAddress = event => {\n    setData(_objectSpread({}, data, {\n      address: event.target.value\n    }));\n  };\n\n  const getTotal = () => {\n    return products.reduce((currentValue, nextValue) => {\n      return currentValue + nextValue.count * nextValue.price;\n    }, 0);\n  };\n\n  const showCheckout = () => {\n    return isAuthenticated() ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, showDropIn()) : React.createElement(Link, {\n      to: \"/signin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Sign in to checkout\"));\n  };\n\n  let deliveryAddress = data.address;\n\n  const buy = () => {\n    setData({\n      loading: true\n    }); // send the nonce to your server\n    // nonce = data.instance.requestPaymentMethod()\n\n    let nonce;\n    let getNonce = data.instance.requestPaymentMethod().then(data => {\n      // console.log(data);\n      nonce = data.nonce; // once you have nonce (card type, card number) send nonce as 'paymentMethodNonce'\n      // and also total to be charged\n      // console.log(\n      //     \"send nonce and total to process: \",\n      //     nonce,\n      //     getTotal(products)\n      // );\n\n      const paymentData = {\n        paymentMethodNonce: nonce,\n        amount: getTotal(products)\n      };\n      processPayment(userId, token, paymentData).then(response => {\n        console.log(response); // empty cart\n        // create order\n\n        const createOrderData = {\n          products: products,\n          transaction_id: response.transaction.id,\n          amount: response.transaction.amount,\n          address: deliveryAddress\n        };\n        createOrder(userId, token, createOrderData).then(response => {\n          emptyCart(() => {\n            console.log(\"payment success and empty cart\");\n            setData({\n              loading: false,\n              success: true\n            });\n          });\n        }).catch(error => {\n          console.log(error);\n          setData({\n            loading: false\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n        setData({\n          loading: false\n        });\n      });\n    }).catch(error => {\n      // console.log(\"dropin error: \", error);\n      setData(_objectSpread({}, data, {\n        error: error.message\n      }));\n    });\n  };\n\n  const showDropIn = () => React.createElement(\"div\", {\n    onBlur: () => setData(_objectSpread({}, data, {\n      error: \"\"\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, data.clientToken !== null && products.length > 0 ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"gorm-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Delivery address:\"), React.createElement(\"textarea\", {\n    onChange: handleAddress,\n    className: \"form-control\",\n    value: data.address,\n    placeholder: \"Type your delivery address here...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), React.createElement(DropIn, {\n    options: {\n      authorization: data.clientToken,\n      paypal: {\n        flow: \"vault\"\n      }\n    },\n    onInstance: instance => data.instance = instance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: buy,\n    className: \"btn btn-success btn-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Pay\")) : null);\n\n  const showError = error => React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    style: {\n      display: error ? \"\" : \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, error);\n\n  const showSuccess = success => React.createElement(\"div\", {\n    className: \"alert alert-info\",\n    style: {\n      display: success ? \"\" : \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Thanks! Your payment was successful!\");\n\n  const showLoading = loading => loading && React.createElement(\"h2\", {\n    className: \"text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"Loading...\");\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Total: $\", getTotal()), showLoading(data.loading), showSuccess(data.success), showError(data.error), showCheckout());\n};\n\nexport default Checkout;","map":{"version":3,"sources":["G:/Navtech-assessment/order-management-frontend/src/core/Checkout.js"],"names":["React","useState","useEffect","getProducts","getBraintreeClientToken","processPayment","createOrder","emptyCart","Card","isAuthenticated","Link","DropIn","Checkout","products","loading","success","clientToken","error","instance","address","data","setData","userId","user","_id","token","getToken","then","handleAddress","event","target","value","getTotal","reduce","currentValue","nextValue","count","price","showCheckout","showDropIn","deliveryAddress","buy","nonce","getNonce","requestPaymentMethod","paymentData","paymentMethodNonce","amount","response","console","log","createOrderData","transaction_id","transaction","id","catch","message","length","authorization","paypal","flow","showError","display","showSuccess","showLoading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    getProducts,\n    getBraintreeClientToken,\n    processPayment,\n    createOrder\n} from \"./apiCore\";\nimport { emptyCart } from \"./cartHelpers\";\nimport Card from \"./Card\";\nimport { isAuthenticated } from \"../auth\";\nimport { Link } from \"react-router-dom\";\nimport \"braintree-web\";\nimport DropIn from \"braintree-web-drop-in-react\";\n\nconst Checkout = ({ products }) => {\n    const [data, setData] = useState({\n        loading: false,\n        success: false,\n        clientToken: null,\n        error: \"\",\n        instance: {},\n        address: \"\"\n    });\n\n    const userId = isAuthenticated() && isAuthenticated().user._id;\n    const token = isAuthenticated() && isAuthenticated().token;\n\n    const getToken = (userId, token) => {\n        getBraintreeClientToken(userId, token).then(data => {\n            if (data.error) {\n                setData({ ...data, error: data.error });\n            } else {\n                setData({ clientToken: data.clientToken });\n            }\n        });\n    };\n\n    useEffect(() => {\n        getToken(userId, token);\n    }, []);\n\n    const handleAddress = event => {\n        setData({ ...data, address: event.target.value });\n    };\n\n    const getTotal = () => {\n        return products.reduce((currentValue, nextValue) => {\n            return currentValue + nextValue.count * nextValue.price;\n        }, 0);\n    };\n\n    const showCheckout = () => {\n        return isAuthenticated() ? (\n            <div>{showDropIn()}</div>\n        ) : (\n            <Link to=\"/signin\">\n                <button className=\"btn btn-primary\">Sign in to checkout</button>\n            </Link>\n        );\n    };\n\n    let deliveryAddress = data.address;\n\n    const buy = () => {\n        setData({ loading: true });\n        // send the nonce to your server\n        // nonce = data.instance.requestPaymentMethod()\n        let nonce;\n        let getNonce = data.instance\n            .requestPaymentMethod()\n            .then(data => {\n                // console.log(data);\n                nonce = data.nonce;\n                // once you have nonce (card type, card number) send nonce as 'paymentMethodNonce'\n                // and also total to be charged\n                // console.log(\n                //     \"send nonce and total to process: \",\n                //     nonce,\n                //     getTotal(products)\n                // );\n                const paymentData = {\n                    paymentMethodNonce: nonce,\n                    amount: getTotal(products)\n                };\n\n                processPayment(userId, token, paymentData)\n                    .then(response => {\n                        console.log(response);\n                        // empty cart\n                        // create order\n\n                        const createOrderData = {\n                            products: products,\n                            transaction_id: response.transaction.id,\n                            amount: response.transaction.amount,\n                            address: deliveryAddress\n                        };\n\n                        createOrder(userId, token, createOrderData)\n                            .then(response => {\n                                emptyCart(() => {\n                                    console.log(\n                                        \"payment success and empty cart\"\n                                    );\n                                    setData({\n                                        loading: false,\n                                        success: true\n                                    });\n                                });\n                            })\n                            .catch(error => {\n                                console.log(error);\n                                setData({ loading: false });\n                            });\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        setData({ loading: false });\n                    });\n            })\n            .catch(error => {\n                // console.log(\"dropin error: \", error);\n                setData({ ...data, error: error.message });\n            });\n    };\n\n    const showDropIn = () => (\n        <div onBlur={() => setData({ ...data, error: \"\" })}>\n            {data.clientToken !== null && products.length > 0 ? (\n                <div>\n                    <div className=\"gorm-group mb-3\">\n                        <label className=\"text-muted\">Delivery address:</label>\n                        <textarea\n                            onChange={handleAddress}\n                            className=\"form-control\"\n                            value={data.address}\n                            placeholder=\"Type your delivery address here...\"\n                        />\n                    </div>\n\n                    <DropIn\n                        options={{\n                            authorization: data.clientToken,\n                            paypal: {\n                                flow: \"vault\"\n                            }\n                        }}\n                        onInstance={instance => (data.instance = instance)}\n                    />\n                    <button onClick={buy} className=\"btn btn-success btn-block\">\n                        Pay\n                    </button>\n                </div>\n            ) : null}\n        </div>\n    );\n\n    const showError = error => (\n        <div\n            className=\"alert alert-danger\"\n            style={{ display: error ? \"\" : \"none\" }}\n        >\n            {error}\n        </div>\n    );\n\n    const showSuccess = success => (\n        <div\n            className=\"alert alert-info\"\n            style={{ display: success ? \"\" : \"none\" }}\n        >\n            Thanks! Your payment was successful!\n        </div>\n    );\n\n    const showLoading = loading =>\n        loading && <h2 className=\"text-danger\">Loading...</h2>;\n\n    return (\n        <div>\n            <h2>Total: ${getTotal()}</h2>\n            {showLoading(data.loading)}\n            {showSuccess(data.success)}\n            {showError(data.error)}\n            {showCheckout()}\n        </div>\n    );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}